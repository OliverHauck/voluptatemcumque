// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package tsh

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IStakingSlashingDepositInfo is an auto generated low-level Go binding around an user-defined struct.
type IStakingSlashingDepositInfo struct {
	Pledgor common.Address
	PubKey  []byte
	Amount  *big.Int
}

// TssStakingSlashingMetaData contains all meta data concerning the TssStakingSlashing contract.
var TssStakingSlashingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"pledgor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"structIStakingSlashing.DepositInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"name\":\"AddDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enumTssStakingSlashing.SlashType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"Slashing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BitToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"}],\"name\":\"batchGetDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pledgor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIStakingSlashing.DepositInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearQuitRequestList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pledgor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getDeposits\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pledgor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"pubKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"structIStakingSlashing.DepositInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuitRequestList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getSlashRecord\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSlashingParams\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bitToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tssGroupContract\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"byteListA\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"byteListB\",\"type\":\"bytes\"}],\"name\":\"isEqual\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isJailed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quitRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"quitRequestList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tssGroup\",\"type\":\"address\"}],\"name\":\"setAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_slashAmount\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_exIncome\",\"type\":\"uint256[2]\"}],\"name\":\"setSlashingParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"slashAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_messageBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_sig\",\"type\":\"bytes\"}],\"name\":\"slashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_pubKey\",\"type\":\"bytes\"}],\"name\":\"staking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tssGroupContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unJail\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b50613b6d806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a35760003560e01c8063740efec3116100ee578063ca628c7811610097578063eb20b58911610071578063eb20b589146103b4578063f2bd7400146103d4578063f2fde38b146103e7578063fc7e286d146103fa57600080fd5b8063ca628c7814610379578063d323041d14610381578063de6fb88a146103a157600080fd5b80638da5cb5b116100c85780638da5cb5b1461032557806394f649dd14610343578063b3fc1cb21461036357600080fd5b8063740efec3146102b7578063793505c8146102bf578063829673ef146102df57600080fd5b8063490ab9d6116101505780635df6db491161012a5780635df6db49146102945780636eae5b11146102a7578063715018a6146102af57600080fd5b8063490ab9d61461023457806357b0f05f146102495780635887c33c1461028157600080fd5b80633b58524d116101815780633b58524d146101ed5780633f95043814610200578063485cc9551461022157600080fd5b8063111b8c02146101a857806314bfb527146101b257806334359808146101da575b600080fd5b6101b061041c565b005b6101c56101c0366004612ef5565b610432565b60405190151581526020015b60405180910390f35b6101c56101e836600461307f565b61058d565b6101b06101fb3660046130e3565b610651565b61021361020e36600461311c565b6106ac565b6040519081526020016101d1565b6101b061022f3660046130e3565b6106c3565b61023c61089a565b6040516101d19190613135565b61025c61025736600461311c565b610909565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d1565b6101b061028f3660046131d8565b610940565b6101b06102a2366004613244565b610c38565b6101b06112f5565b6101b0611503565b6101b0611515565b6102d26102cd366004613290565b6118d6565b6040516101d191906133c4565b6101c56102ed366004613444565b6000918252609f6020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b60335473ffffffffffffffffffffffffffffffffffffffff1661025c565b610356610351366004612ef5565b611aad565b6040516101d19190613469565b61036b611bca565b6040516101d192919061349f565b6101b0611c45565b60985461025c9073ffffffffffffffffffffffffffffffffffffffff1681565b6101b06103af3660046134cb565b6120c4565b60975461025c9073ffffffffffffffffffffffffffffffffffffffff1681565b6102136103e236600461311c565b61233d565b6101b06103f5366004612ef5565b61234d565b61040d610408366004612ef5565b6123ea565b6040516101d193929190613500565b6104246124ac565b610430609a6000612daa565b565b60985473ffffffffffffffffffffffffffffffffffffffff82811660009081526099602052604080822090517f54bbb9140000000000000000000000000000000000000000000000000000000081529193849316916354bbb9149161049f91600190910190600401613593565b600060405180830381600087803b1580156104b957600080fd5b505af11580156104cd573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105139190810190613691565b80515190915060401461056d5760405162461bcd60e51b815260206004820152601460248201527f747373206d656d626572206e6f7420657869737400000000000000000000000060448201526064015b60405180910390fd5b60018160400151600181111561058557610585613758565b149392505050565b600081518351146105a05750600061064b565b60005b8351811015610645578281815181106105be576105be613787565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19168482815181106105fd576105fd613787565b01602001517fff00000000000000000000000000000000000000000000000000000000000000161461063357600091505061064b565b8061063d816137e5565b9150506105a3565b50600190505b92915050565b6106596124ac565b6097805473ffffffffffffffffffffffffffffffffffffffff9384167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161790915560988054929093169116179055565b609d81600281106106bc57600080fd5b0154905081565b600054610100900460ff16158080156106e35750600054600160ff909116105b806106fd5750303b1580156106fd575060005460ff166001145b61076f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610564565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156107cd57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6107d5612513565b6107dd612598565b6097805473ffffffffffffffffffffffffffffffffffffffff8086167fffffffffffffffffffffffff0000000000000000000000000000000000000000928316179092556098805492851692909116919091179055801561089557600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6060609a8054806020026020016040519081016040528092919081815260200182805480156108ff57602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116108d4575b5050505050905090565b609a818154811061091957600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600260655414156109935760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610564565b600260655560006109a68486018661382d565b90506109b58160200151610432565b15610a025760405162461bcd60e51b815260206004820152601760248201527f746865206e6f646520616c7265616479206a61696c65640000000000000000006044820152606401610564565b80516000908152609f602090815260408083208285015173ffffffffffffffffffffffffffffffffffffffff16845290915290205460ff1615610a875760405162461bcd60e51b815260206004820152600f60248201527f616c726561647920736c617368656400000000000000000000000000000000006044820152606401610564565b80516000908152609f602090815260408083208285015173ffffffffffffffffffffffffffffffffffffffff908116855292529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556098549151911690633231a7f090610b029088908890613937565b6040519081900381207fffffffff0000000000000000000000000000000000000000000000000000000060e084901b168252610b449187908790600401613990565b602060405180830381600087803b158015610b5e57600080fd5b505af1158015610b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9691906139b3565b610be25760405162461bcd60e51b815260206004820152601c60248201527f7369676e6572206e6f74207473732067726f757020707562206b6579000000006044820152606401610564565b610beb8161261d565b7f9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e81602001518260600151604051610c249291906139d5565b60405180910390a150506001606555505050565b60026065541415610c8b5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610564565b600260655560005b6002811015610d9b576000609b8260028110610cb157610cb1613787565b015411610d005760405162461bcd60e51b815260206004820152601d60248201527f68617665206e6f74207365742074686520736c61736820616d6f756e740000006044820152606401610564565b6000609d8260028110610d1557610d15613787565b015411610d895760405162461bcd60e51b8152602060048201526024808201527f68617665206e6f74207365742074686520657874726120696e636f6d6520616d60448201527f6f756e74000000000000000000000000000000000000000000000000000000006064820152608401610564565b80610d93816137e5565b915050610c93565b5060008311610dec5760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e740000000000000000000000000000000000006044820152606401610564565b609c5433600090815260996020526040902060020154610e0d908590613a36565b1015610e5b5760405162461bcd60e51b815260206004820152601b60248201527f6e656564206465706f736974203e3d20736c617368416d6f756e7400000000006044820152606401610564565b3360009081526099602052604081206001018054610e789061353f565b90501115610fad573360009081526099602052604090206001018054610f5c9190610ea29061353f565b80601f0160208091040260200160405190810160405280929190818152602001828054610ece9061353f565b8015610f1b5780601f10610ef057610100808354040283529160200191610f1b565b820191906000526020600020905b815481529060010190602001808311610efe57829003601f168201915b505050505083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061058d92505050565b610fa85760405162461bcd60e51b815260206004820152601060248201527f7075624b6579206e6f7420657175616c000000000000000000000000000000006044820152606401610564565b611128565b6098546040517f43ae656c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906343ae656c906110059085908590600401613a4e565b602060405180830381600087803b15801561101f57600080fd5b505af1158015611033573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110579190613a6a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146110d15760405162461bcd60e51b815260206004820152600e60248201527f696e76616c6964207075624b65790000000000000000000000000000000000006044820152606401610564565b3360009081526099602052604090206110ee906001018383612dc8565b5033600081815260996020526040902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690911790555b6097546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810185905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b1580156111a057600080fd5b505af11580156111b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d891906139b3565b6112245760405162461bcd60e51b815260206004820152601b60248201527f7472616e7366657220657263323020746f6b656e206661696c656400000000006044820152606401610564565b3360009081526099602052604081206002018054859290611246908490613a36565b925050819055507f3183ac23cb0f1e36109abc28e6807d6282c166cb0a538cb5617024770fc738353360405180606001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200185858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020018690526040516112e3929190613a87565b60405180910390a15050600160655550565b60005b6002811015611400576000609b826002811061131657611316613787565b0154116113655760405162461bcd60e51b815260206004820152601d60248201527f68617665206e6f74207365742074686520736c61736820616d6f756e740000006044820152606401610564565b6000609d826002811061137a5761137a613787565b0154116113ee5760405162461bcd60e51b8152602060048201526024808201527f68617665206e6f74207365742074686520657874726120696e636f6d6520616d60448201527f6f756e74000000000000000000000000000000000000000000000000000000006064820152608401610564565b806113f8816137e5565b9150506112f8565b50609c543360009081526099602052604090206002015410156114655760405162461bcd60e51b815260206004820152601460248201527f496e73756666696369656e742062616c616e63650000000000000000000000006044820152606401610564565b609854336000908152609960205260409081902090517f429ec49c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163429ec49c916114cf91600190910190600401613593565b600060405180830381600087803b1580156114e957600080fd5b505af11580156114fd573d6000803e3d6000fd5b50505050565b61150b6124ac565b61043060006129a9565b600260655414156115685760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610564565b6002606581905533600090815260996020526040902001546115cc5760405162461bcd60e51b815260206004820152601360248201527f646f206e6f742068617665206465706f736974000000000000000000000000006044820152606401610564565b609854336000908152609960205260409081902090517f4866e2e000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90921691634866e2e09161163691600190910190600401613593565b602060405180830381600087803b15801561165057600080fd5b505af1158015611664573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168891906139b3565b8061174a5750609854336000908152609960205260409081902090517fbcbc5fc600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163bcbc5fc6916116f891600190910190600401613593565b602060405180830381600087803b15801561171257600080fd5b505af1158015611726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174a91906139b3565b6117bc5760405162461bcd60e51b815260206004820152602960248201527f6e6f742061742074686520696e6163746976652067726f7570206f722061637460448201527f6976652067726f757000000000000000000000000000000000000000000000006064820152608401610564565b60005b609a54811015611875573373ffffffffffffffffffffffffffffffffffffffff16609a82815481106117f3576117f3613787565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff1614156118635760405162461bcd60e51b815260206004820152601a60248201527f616c726561647920696e2071756974526571756573744c6973740000000000006044820152606401610564565b8061186d816137e5565b9150506117bf565b50609a8054600181810183556000929092527f44da158ba27f9252712a74ff6a55c5d531f69609f1f6e7f17c4443a8e2089be40180547fffffffffffffffffffffffff00000000000000000000000000000000000000001633179055606555565b606060008267ffffffffffffffff8111156118f3576118f3612f19565b60405190808252806020026020018201604052801561195e57816020015b61194b6040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600081525090565b8152602001906001900390816119115790505b50905060005b83811015611aa5576099600086868481811061198257611982613787565b90506020020160208101906119979190612ef5565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000208251606081019093528054909116825260018101805492939192918401916119e99061353f565b80601f0160208091040260200160405190810160405280929190818152602001828054611a159061353f565b8015611a625780601f10611a3757610100808354040283529160200191611a62565b820191906000526020600020905b815481529060010190602001808311611a4557829003601f168201915b50505050508152602001600282015481525050828281518110611a8757611a87613787565b60200260200101819052508080611a9d906137e5565b915050611964565b509392505050565b611ae76040518060600160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160608152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff8083166000908152609960209081526040918290208251606081019093528054909316825260018301805492939291840191611b379061353f565b80601f0160208091040260200160405190810160405280929190818152602001828054611b639061353f565b8015611bb05780601f10611b8557610100808354040283529160200191611bb0565b820191906000526020600020905b815481529060010190602001808311611b9357829003601f168201915b505050505081526020016002820154815250509050919050565b611bd2612e6a565b611bda612e6a565b6040805180820191829052609b91609d9190839060029082845b815481526020019060010190808311611bf4575050604080518082019182905294965085935060029250905082845b815481526020019060010190808311611c235750505050509050915091509091565b60026065541415611c985760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610564565b60026065819055336000908152609960205260409020015480611cfd5760405162461bcd60e51b815260206004820152601360248201527f646f206e6f742068617665206465706f736974000000000000000000000000006044820152606401610564565b3360009081526099602052604081206001018054611d1a9061353f565b80601f0160208091040260200160405190810160405280929190818152602001828054611d469061353f565b8015611d935780601f10611d6857610100808354040283529160200191611d93565b820191906000526020600020905b815481529060010190602001808311611d7657829003601f168201915b50506098546040517f4866e2e000000000000000000000000000000000000000000000000000000000815294955073ffffffffffffffffffffffffffffffffffffffff1693634866e2e09350611def9250859150600401613ab6565b602060405180830381600087803b158015611e0957600080fd5b505af1158015611e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4191906139b3565b158015611ef357506098546040517fbcbc5fc600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063bcbc5fc690611e9f908490600401613ab6565b602060405180830381600087803b158015611eb957600080fd5b505af1158015611ecd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ef191906139b3565b155b611f3f5760405162461bcd60e51b815260206004820152601560248201527f6e6f74206174207468652072696768742074696d6500000000000000000000006044820152606401610564565b33600090815260996020526040812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016815590611f826001830182612e88565b506000600291909101556097546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810184905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90604401602060405180830381600087803b158015611ffe57600080fd5b505af1158015612012573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203691906139b3565b6120825760405162461bcd60e51b815260206004820152601560248201527f6572633230207472616e73666572206661696c656400000000000000000000006044820152606401610564565b60408051338152602081018490527f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364910160405180910390a150506001606555565b6120cc6124ac565b81356020830135116121465760405162461bcd60e51b815260206004820152602b60248201527f696e76616c696420706172616d20736c617368416d6f756e742c20616e696d7560448201527f73203c3d20757074696d650000000000000000000000000000000000000000006064820152608401610564565b80356020820135116121c05760405162461bcd60e51b815260206004820152602860248201527f696e76616c696420706172616d206578496e636f6d652c20616e696d7573203c60448201527f3d20757074696d650000000000000000000000000000000000000000000000006064820152608401610564565b60005b60028110156108955760008282600281106121e0576121e0613787565b6020020135116122325760405162461bcd60e51b815260206004820152600e60248201527f696e76616c696420616d6f756e740000000000000000000000000000000000006044820152606401610564565b81816002811061224457612244613787565b602002013583826002811061225b5761225b613787565b6020020135116122d35760405162461bcd60e51b815260206004820152602560248201527f736c617368416d6f756e74206e65656420626967676572207468616e2065784960448201527f6e636f6d650000000000000000000000000000000000000000000000000000006064820152608401610564565b8281600281106122e5576122e5613787565b6020020135609b82600281106122fd576122fd613787565b015581816002811061231157612311613787565b6020020135609d826002811061232957612329613787565b015580612335816137e5565b9150506121c3565b609b81600281106106bc57600080fd5b6123556124ac565b73ffffffffffffffffffffffffffffffffffffffff81166123de5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610564565b6123e7816129a9565b50565b6099602052600090815260409020805460018201805473ffffffffffffffffffffffffffffffffffffffff90921692916124239061353f565b80601f016020809104026020016040519081016040528092919081815260200182805461244f9061353f565b801561249c5780601f106124715761010080835404028352916020019161249c565b820191906000526020600020905b81548152906001019060200180831161247f57829003601f168201915b5050505050908060020154905083565b60335473ffffffffffffffffffffffffffffffffffffffff1633146104305760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610564565b600054610100900460ff166125905760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610564565b610430612a20565b600054610100900460ff166126155760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610564565b610430612aa6565b60005b6002811015612728576000609b826002811061263e5761263e613787565b01541161268d5760405162461bcd60e51b815260206004820152601d60248201527f68617665206e6f74207365742074686520736c61736820616d6f756e740000006044820152606401610564565b6000609d82600281106126a2576126a2613787565b0154116127165760405162461bcd60e51b8152602060048201526024808201527f68617665206e6f74207365742074686520657874726120696e636f6d6520616d60448201527f6f756e74000000000000000000000000000000000000000000000000000000006064820152608401610564565b80612720816137e5565b915050612620565b5060208082015173ffffffffffffffffffffffffffffffffffffffff16600090815260999091526040812060010180546127619061353f565b80601f016020809104026020016040519081016040528092919081815260200182805461278d9061353f565b80156127da5780601f106127af576101008083540402835291602001916127da565b820191906000526020600020905b8154815290600101906020018083116127bd57829003601f168201915b50939450600193506127eb92505050565b8260600151600281111561280157612801613758565b14156128a7576098546040517f254ff98100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063254ff9819061285d908490600401613ab6565b600060405180830381600087803b15801561287757600080fd5b505af115801561288b573d6000803e3d6000fd5b505050506128a3826020015160008460400151612b2a565b5050565b6002826060015160028111156128bf576128bf613758565b1415612961576098546040517f7a952c1100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690637a952c119061291b908490600401613ab6565b600060405180830381600087803b15801561293557600080fd5b505af1158015612949573d6000803e3d6000fd5b505050506128a3826020015160018460400151612b2a565b60405162461bcd60e51b815260206004820152601560248201527f657272207479706520666f7220736c617368696e6700000000000000000000006044820152606401610564565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16612a9d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610564565b610430336129a9565b600054610100900460ff16612b235760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610564565b6001606555565b60008080808080609b8860028110612b4457612b44613787565b015473ffffffffffffffffffffffffffffffffffffffff8a166000908152609960205260409020600201541015612bbd5760405162461bcd60e51b815260206004820152601b60248201527f646f206e6f74206861766520656e6f75676874206465706f73697400000000006044820152606401610564565b609b8860028110612bd057612bd0613787565b01549550609d8860028110612be757612be7613787565b015473ffffffffffffffffffffffffffffffffffffffff8a16600090815260996020526040812060020180549293508892909190612c26908490613ac9565b90915550612c3690508187613ac9565b9350865184612c459190613b0f565b8751909350612c548486613ac9565b612c5e9190613b23565b9150612c6a8382613a36565b3360009081526099602052604081206002018054909190612c8c908490613a36565b90915550839050609d8960028110612ca657612ca6613787565b0154612cb29190613a36565b945060005b8751811015612d4f57612cca8387613a36565b955082609960008a8481518110612ce357612ce3613787565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000828254612d379190613a36565b90915550819050612d47816137e5565b915050612cb7565b50858514612d9f5760405162461bcd60e51b815260206004820152601860248201527f70616e69632c2063616c63756c6174696f6e206572726f7200000000000000006044820152606401610564565b505050505050505050565b50805460008255906000526020600020908101906123e79190612ebe565b828054612dd49061353f565b90600052602060002090601f016020900481019282612df65760008555612e5a565b82601f10612e2d578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00823516178555612e5a565b82800160010185558215612e5a579182015b82811115612e5a578235825591602001919060010190612e3f565b50612e66929150612ebe565b5090565b60405180604001604052806002906020820280368337509192915050565b508054612e949061353f565b6000825580601f10612ea4575050565b601f0160209004906000526020600020908101906123e791905b5b80821115612e665760008155600101612ebf565b73ffffffffffffffffffffffffffffffffffffffff811681146123e757600080fd5b600060208284031215612f0757600080fd5b8135612f1281612ed3565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715612f6b57612f6b612f19565b60405290565b6040516080810167ffffffffffffffff81118282101715612f6b57612f6b612f19565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612fdb57612fdb612f19565b604052919050565b600067ffffffffffffffff821115612ffd57612ffd612f19565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600082601f83011261303a57600080fd5b813561304d61304882612fe3565b612f94565b81815284602083860101111561306257600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561309257600080fd5b823567ffffffffffffffff808211156130aa57600080fd5b6130b686838701613029565b935060208501359150808211156130cc57600080fd5b506130d985828601613029565b9150509250929050565b600080604083850312156130f657600080fd5b823561310181612ed3565b9150602083013561311181612ed3565b809150509250929050565b60006020828403121561312e57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561318357835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101613151565b50909695505050505050565b60008083601f8401126131a157600080fd5b50813567ffffffffffffffff8111156131b957600080fd5b6020830191508360208285010111156131d157600080fd5b9250929050565b600080600080604085870312156131ee57600080fd5b843567ffffffffffffffff8082111561320657600080fd5b6132128883890161318f565b9096509450602087013591508082111561322b57600080fd5b506132388782880161318f565b95989497509550505050565b60008060006040848603121561325957600080fd5b83359250602084013567ffffffffffffffff81111561327757600080fd5b6132838682870161318f565b9497909650939450505050565b600080602083850312156132a357600080fd5b823567ffffffffffffffff808211156132bb57600080fd5b818501915085601f8301126132cf57600080fd5b8135818111156132de57600080fd5b8660208260051b85010111156132f357600080fd5b60209290920196919550909350505050565b60005b83811015613320578181015183820152602001613308565b838111156114fd5750506000910152565b60008151808452613349816020860160208601613305565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff815116825260006020820151606060208501526133b06060850182613331565b604093840151949093019390935250919050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015613437577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261342585835161337b565b945092850192908501906001016133eb565b5092979650505050505050565b6000806040838503121561345757600080fd5b82359150602083013561311181612ed3565b602081526000612f12602083018461337b565b8060005b60028110156114fd578151845260209384019390910190600101613480565b608081016134ad828561347c565b612f12604083018461347c565b806040810183101561064b57600080fd5b600080608083850312156134de57600080fd5b6134e884846134ba565b91506134f784604085016134ba565b90509250929050565b73ffffffffffffffffffffffffffffffffffffffff8416815260606020820152600061352f6060830185613331565b9050826040830152949350505050565b600181811c9082168061355357607f821691505b6020821081141561358d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600060208083526000845481600182811c9150808316806135b557607f831692505b8583108114156135ec577f4e487b710000000000000000000000000000000000000000000000000000000085526022600452602485fd5b878601838152602001818015613609576001811461363857613663565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00861682528782019650613663565b60008b81526020902060005b8681101561365d57815484820152908501908901613644565b83019750505b50949998505050505050505050565b805161367d81612ed3565b919050565b80516002811061367d57600080fd5b600060208083850312156136a457600080fd5b825167ffffffffffffffff808211156136bc57600080fd5b90840190606082870312156136d057600080fd5b6136d8612f48565b8251828111156136e757600080fd5b83019150601f820187136136fa57600080fd5b815161370861304882612fe3565b818152888683860101111561371c57600080fd5b61372b82878301888701613305565b825250613739838501613672565b8482015261374960408401613682565b60408201529695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613817576138176137b6565b5060010190565b80356003811061367d57600080fd5b6000602080838503121561384057600080fd5b823567ffffffffffffffff8082111561385857600080fd5b908401906080828703121561386c57600080fd5b613874612f71565b823581528383013561388581612ed3565b8185015260408301358281111561389b57600080fd5b8301601f810188136138ac57600080fd5b8035838111156138be576138be612f19565b8060051b93506138cf868501612f94565b818152938201860193868101908a8611156138e957600080fd5b928701925b85841015613913578335925061390383612ed3565b82825292870192908701906138ee565b6040850152506139289150506060840161381e565b60608201529695505050505050565b8183823760009101908152919050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8381526040602082015260006139aa604083018486613947565b95945050505050565b6000602082840312156139c557600080fd5b81518015158114612f1257600080fd5b73ffffffffffffffffffffffffffffffffffffffff831681526040810160038310613a29577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8260208301529392505050565b60008219821115613a4957613a496137b6565b500190565b602081526000613a62602083018486613947565b949350505050565b600060208284031215613a7c57600080fd5b8151612f1281612ed3565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000613a62604083018461337b565b602081526000612f126020830184613331565b600082821015613adb57613adb6137b6565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613b1e57613b1e613ae0565b500690565b600082613b3257613b32613ae0565b50049056fea264697066735822122000d818c4c0e4b7b249f63dea37cbb78b551fd0e6129af57daa3f799c4c1b68e264736f6c63430008090033",
}

// TssStakingSlashingABI is the input ABI used to generate the binding from.
// Deprecated: Use TssStakingSlashingMetaData.ABI instead.
var TssStakingSlashingABI = TssStakingSlashingMetaData.ABI

// TssStakingSlashingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use TssStakingSlashingMetaData.Bin instead.
var TssStakingSlashingBin = TssStakingSlashingMetaData.Bin

// DeployTssStakingSlashing deploys a new Ethereum contract, binding an instance of TssStakingSlashing to it.
func DeployTssStakingSlashing(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *TssStakingSlashing, error) {
	parsed, err := TssStakingSlashingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(TssStakingSlashingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &TssStakingSlashing{TssStakingSlashingCaller: TssStakingSlashingCaller{contract: contract}, TssStakingSlashingTransactor: TssStakingSlashingTransactor{contract: contract}, TssStakingSlashingFilterer: TssStakingSlashingFilterer{contract: contract}}, nil
}

// TssStakingSlashing is an auto generated Go binding around an Ethereum contract.
type TssStakingSlashing struct {
	TssStakingSlashingCaller     // Read-only binding to the contract
	TssStakingSlashingTransactor // Write-only binding to the contract
	TssStakingSlashingFilterer   // Log filterer for contract events
}

// TssStakingSlashingCaller is an auto generated read-only Go binding around an Ethereum contract.
type TssStakingSlashingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TssStakingSlashingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type TssStakingSlashingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TssStakingSlashingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type TssStakingSlashingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// TssStakingSlashingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type TssStakingSlashingSession struct {
	Contract     *TssStakingSlashing // Generic contract binding to set the session for
	CallOpts     bind.CallOpts       // Call options to use throughout this session
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// TssStakingSlashingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type TssStakingSlashingCallerSession struct {
	Contract *TssStakingSlashingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts             // Call options to use throughout this session
}

// TssStakingSlashingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type TssStakingSlashingTransactorSession struct {
	Contract     *TssStakingSlashingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts             // Transaction auth options to use throughout this session
}

// TssStakingSlashingRaw is an auto generated low-level Go binding around an Ethereum contract.
type TssStakingSlashingRaw struct {
	Contract *TssStakingSlashing // Generic contract binding to access the raw methods on
}

// TssStakingSlashingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type TssStakingSlashingCallerRaw struct {
	Contract *TssStakingSlashingCaller // Generic read-only contract binding to access the raw methods on
}

// TssStakingSlashingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type TssStakingSlashingTransactorRaw struct {
	Contract *TssStakingSlashingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewTssStakingSlashing creates a new instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashing(address common.Address, backend bind.ContractBackend) (*TssStakingSlashing, error) {
	contract, err := bindTssStakingSlashing(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashing{TssStakingSlashingCaller: TssStakingSlashingCaller{contract: contract}, TssStakingSlashingTransactor: TssStakingSlashingTransactor{contract: contract}, TssStakingSlashingFilterer: TssStakingSlashingFilterer{contract: contract}}, nil
}

// NewTssStakingSlashingCaller creates a new read-only instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashingCaller(address common.Address, caller bind.ContractCaller) (*TssStakingSlashingCaller, error) {
	contract, err := bindTssStakingSlashing(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingCaller{contract: contract}, nil
}

// NewTssStakingSlashingTransactor creates a new write-only instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashingTransactor(address common.Address, transactor bind.ContractTransactor) (*TssStakingSlashingTransactor, error) {
	contract, err := bindTssStakingSlashing(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingTransactor{contract: contract}, nil
}

// NewTssStakingSlashingFilterer creates a new log filterer instance of TssStakingSlashing, bound to a specific deployed contract.
func NewTssStakingSlashingFilterer(address common.Address, filterer bind.ContractFilterer) (*TssStakingSlashingFilterer, error) {
	contract, err := bindTssStakingSlashing(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingFilterer{contract: contract}, nil
}

// bindTssStakingSlashing binds a generic wrapper to an already deployed contract.
func bindTssStakingSlashing(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := TssStakingSlashingMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TssStakingSlashing *TssStakingSlashingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TssStakingSlashing.Contract.TssStakingSlashingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TssStakingSlashing *TssStakingSlashingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TssStakingSlashingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TssStakingSlashing *TssStakingSlashingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TssStakingSlashingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_TssStakingSlashing *TssStakingSlashingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _TssStakingSlashing.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_TssStakingSlashing *TssStakingSlashingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_TssStakingSlashing *TssStakingSlashingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.contract.Transact(opts, method, params...)
}

// BitToken is a free data retrieval call binding the contract method 0xeb20b589.
//
// Solidity: function BitToken() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) BitToken(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "BitToken")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BitToken is a free data retrieval call binding the contract method 0xeb20b589.
//
// Solidity: function BitToken() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) BitToken() (common.Address, error) {
	return _TssStakingSlashing.Contract.BitToken(&_TssStakingSlashing.CallOpts)
}

// BitToken is a free data retrieval call binding the contract method 0xeb20b589.
//
// Solidity: function BitToken() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) BitToken() (common.Address, error) {
	return _TssStakingSlashing.Contract.BitToken(&_TssStakingSlashing.CallOpts)
}

// BatchGetDeposits is a free data retrieval call binding the contract method 0x793505c8.
//
// Solidity: function batchGetDeposits(address[] users) view returns((address,bytes,uint256)[])
func (_TssStakingSlashing *TssStakingSlashingCaller) BatchGetDeposits(opts *bind.CallOpts, users []common.Address) ([]IStakingSlashingDepositInfo, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "batchGetDeposits", users)

	if err != nil {
		return *new([]IStakingSlashingDepositInfo), err
	}

	out0 := *abi.ConvertType(out[0], new([]IStakingSlashingDepositInfo)).(*[]IStakingSlashingDepositInfo)

	return out0, err

}

// BatchGetDeposits is a free data retrieval call binding the contract method 0x793505c8.
//
// Solidity: function batchGetDeposits(address[] users) view returns((address,bytes,uint256)[])
func (_TssStakingSlashing *TssStakingSlashingSession) BatchGetDeposits(users []common.Address) ([]IStakingSlashingDepositInfo, error) {
	return _TssStakingSlashing.Contract.BatchGetDeposits(&_TssStakingSlashing.CallOpts, users)
}

// BatchGetDeposits is a free data retrieval call binding the contract method 0x793505c8.
//
// Solidity: function batchGetDeposits(address[] users) view returns((address,bytes,uint256)[])
func (_TssStakingSlashing *TssStakingSlashingCallerSession) BatchGetDeposits(users []common.Address) ([]IStakingSlashingDepositInfo, error) {
	return _TssStakingSlashing.Contract.BatchGetDeposits(&_TssStakingSlashing.CallOpts, users)
}

// Deposits is a free data retrieval call binding the contract method 0xfc7e286d.
//
// Solidity: function deposits(address ) view returns(address pledgor, bytes pubKey, uint256 amount)
func (_TssStakingSlashing *TssStakingSlashingCaller) Deposits(opts *bind.CallOpts, arg0 common.Address) (struct {
	Pledgor common.Address
	PubKey  []byte
	Amount  *big.Int
}, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "deposits", arg0)

	outstruct := new(struct {
		Pledgor common.Address
		PubKey  []byte
		Amount  *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Pledgor = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.PubKey = *abi.ConvertType(out[1], new([]byte)).(*[]byte)
	outstruct.Amount = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// Deposits is a free data retrieval call binding the contract method 0xfc7e286d.
//
// Solidity: function deposits(address ) view returns(address pledgor, bytes pubKey, uint256 amount)
func (_TssStakingSlashing *TssStakingSlashingSession) Deposits(arg0 common.Address) (struct {
	Pledgor common.Address
	PubKey  []byte
	Amount  *big.Int
}, error) {
	return _TssStakingSlashing.Contract.Deposits(&_TssStakingSlashing.CallOpts, arg0)
}

// Deposits is a free data retrieval call binding the contract method 0xfc7e286d.
//
// Solidity: function deposits(address ) view returns(address pledgor, bytes pubKey, uint256 amount)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) Deposits(arg0 common.Address) (struct {
	Pledgor common.Address
	PubKey  []byte
	Amount  *big.Int
}, error) {
	return _TssStakingSlashing.Contract.Deposits(&_TssStakingSlashing.CallOpts, arg0)
}

// ExIncome is a free data retrieval call binding the contract method 0x3f950438.
//
// Solidity: function exIncome(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCaller) ExIncome(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "exIncome", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ExIncome is a free data retrieval call binding the contract method 0x3f950438.
//
// Solidity: function exIncome(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingSession) ExIncome(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.ExIncome(&_TssStakingSlashing.CallOpts, arg0)
}

// ExIncome is a free data retrieval call binding the contract method 0x3f950438.
//
// Solidity: function exIncome(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) ExIncome(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.ExIncome(&_TssStakingSlashing.CallOpts, arg0)
}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address user) view returns((address,bytes,uint256))
func (_TssStakingSlashing *TssStakingSlashingCaller) GetDeposits(opts *bind.CallOpts, user common.Address) (IStakingSlashingDepositInfo, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "getDeposits", user)

	if err != nil {
		return *new(IStakingSlashingDepositInfo), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakingSlashingDepositInfo)).(*IStakingSlashingDepositInfo)

	return out0, err

}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address user) view returns((address,bytes,uint256))
func (_TssStakingSlashing *TssStakingSlashingSession) GetDeposits(user common.Address) (IStakingSlashingDepositInfo, error) {
	return _TssStakingSlashing.Contract.GetDeposits(&_TssStakingSlashing.CallOpts, user)
}

// GetDeposits is a free data retrieval call binding the contract method 0x94f649dd.
//
// Solidity: function getDeposits(address user) view returns((address,bytes,uint256))
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetDeposits(user common.Address) (IStakingSlashingDepositInfo, error) {
	return _TssStakingSlashing.Contract.GetDeposits(&_TssStakingSlashing.CallOpts, user)
}

// GetQuitRequestList is a free data retrieval call binding the contract method 0x490ab9d6.
//
// Solidity: function getQuitRequestList() view returns(address[])
func (_TssStakingSlashing *TssStakingSlashingCaller) GetQuitRequestList(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "getQuitRequestList")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetQuitRequestList is a free data retrieval call binding the contract method 0x490ab9d6.
//
// Solidity: function getQuitRequestList() view returns(address[])
func (_TssStakingSlashing *TssStakingSlashingSession) GetQuitRequestList() ([]common.Address, error) {
	return _TssStakingSlashing.Contract.GetQuitRequestList(&_TssStakingSlashing.CallOpts)
}

// GetQuitRequestList is a free data retrieval call binding the contract method 0x490ab9d6.
//
// Solidity: function getQuitRequestList() view returns(address[])
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetQuitRequestList() ([]common.Address, error) {
	return _TssStakingSlashing.Contract.GetQuitRequestList(&_TssStakingSlashing.CallOpts)
}

// GetSlashRecord is a free data retrieval call binding the contract method 0x829673ef.
//
// Solidity: function getSlashRecord(uint256 batchIndex, address user) view returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCaller) GetSlashRecord(opts *bind.CallOpts, batchIndex *big.Int, user common.Address) (bool, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "getSlashRecord", batchIndex, user)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// GetSlashRecord is a free data retrieval call binding the contract method 0x829673ef.
//
// Solidity: function getSlashRecord(uint256 batchIndex, address user) view returns(bool)
func (_TssStakingSlashing *TssStakingSlashingSession) GetSlashRecord(batchIndex *big.Int, user common.Address) (bool, error) {
	return _TssStakingSlashing.Contract.GetSlashRecord(&_TssStakingSlashing.CallOpts, batchIndex, user)
}

// GetSlashRecord is a free data retrieval call binding the contract method 0x829673ef.
//
// Solidity: function getSlashRecord(uint256 batchIndex, address user) view returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetSlashRecord(batchIndex *big.Int, user common.Address) (bool, error) {
	return _TssStakingSlashing.Contract.GetSlashRecord(&_TssStakingSlashing.CallOpts, batchIndex, user)
}

// GetSlashingParams is a free data retrieval call binding the contract method 0xb3fc1cb2.
//
// Solidity: function getSlashingParams() view returns(uint256[2], uint256[2])
func (_TssStakingSlashing *TssStakingSlashingCaller) GetSlashingParams(opts *bind.CallOpts) ([2]*big.Int, [2]*big.Int, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "getSlashingParams")

	if err != nil {
		return *new([2]*big.Int), *new([2]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([2]*big.Int)).(*[2]*big.Int)
	out1 := *abi.ConvertType(out[1], new([2]*big.Int)).(*[2]*big.Int)

	return out0, out1, err

}

// GetSlashingParams is a free data retrieval call binding the contract method 0xb3fc1cb2.
//
// Solidity: function getSlashingParams() view returns(uint256[2], uint256[2])
func (_TssStakingSlashing *TssStakingSlashingSession) GetSlashingParams() ([2]*big.Int, [2]*big.Int, error) {
	return _TssStakingSlashing.Contract.GetSlashingParams(&_TssStakingSlashing.CallOpts)
}

// GetSlashingParams is a free data retrieval call binding the contract method 0xb3fc1cb2.
//
// Solidity: function getSlashingParams() view returns(uint256[2], uint256[2])
func (_TssStakingSlashing *TssStakingSlashingCallerSession) GetSlashingParams() ([2]*big.Int, [2]*big.Int, error) {
	return _TssStakingSlashing.Contract.GetSlashingParams(&_TssStakingSlashing.CallOpts)
}

// IsEqual is a free data retrieval call binding the contract method 0x34359808.
//
// Solidity: function isEqual(bytes byteListA, bytes byteListB) pure returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCaller) IsEqual(opts *bind.CallOpts, byteListA []byte, byteListB []byte) (bool, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "isEqual", byteListA, byteListB)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsEqual is a free data retrieval call binding the contract method 0x34359808.
//
// Solidity: function isEqual(bytes byteListA, bytes byteListB) pure returns(bool)
func (_TssStakingSlashing *TssStakingSlashingSession) IsEqual(byteListA []byte, byteListB []byte) (bool, error) {
	return _TssStakingSlashing.Contract.IsEqual(&_TssStakingSlashing.CallOpts, byteListA, byteListB)
}

// IsEqual is a free data retrieval call binding the contract method 0x34359808.
//
// Solidity: function isEqual(bytes byteListA, bytes byteListB) pure returns(bool)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) IsEqual(byteListA []byte, byteListB []byte) (bool, error) {
	return _TssStakingSlashing.Contract.IsEqual(&_TssStakingSlashing.CallOpts, byteListA, byteListB)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) Owner() (common.Address, error) {
	return _TssStakingSlashing.Contract.Owner(&_TssStakingSlashing.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) Owner() (common.Address, error) {
	return _TssStakingSlashing.Contract.Owner(&_TssStakingSlashing.CallOpts)
}

// QuitRequestList is a free data retrieval call binding the contract method 0x57b0f05f.
//
// Solidity: function quitRequestList(uint256 ) view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) QuitRequestList(opts *bind.CallOpts, arg0 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "quitRequestList", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// QuitRequestList is a free data retrieval call binding the contract method 0x57b0f05f.
//
// Solidity: function quitRequestList(uint256 ) view returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) QuitRequestList(arg0 *big.Int) (common.Address, error) {
	return _TssStakingSlashing.Contract.QuitRequestList(&_TssStakingSlashing.CallOpts, arg0)
}

// QuitRequestList is a free data retrieval call binding the contract method 0x57b0f05f.
//
// Solidity: function quitRequestList(uint256 ) view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) QuitRequestList(arg0 *big.Int) (common.Address, error) {
	return _TssStakingSlashing.Contract.QuitRequestList(&_TssStakingSlashing.CallOpts, arg0)
}

// SlashAmount is a free data retrieval call binding the contract method 0xf2bd7400.
//
// Solidity: function slashAmount(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCaller) SlashAmount(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "slashAmount", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SlashAmount is a free data retrieval call binding the contract method 0xf2bd7400.
//
// Solidity: function slashAmount(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingSession) SlashAmount(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.SlashAmount(&_TssStakingSlashing.CallOpts, arg0)
}

// SlashAmount is a free data retrieval call binding the contract method 0xf2bd7400.
//
// Solidity: function slashAmount(uint256 ) view returns(uint256)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) SlashAmount(arg0 *big.Int) (*big.Int, error) {
	return _TssStakingSlashing.Contract.SlashAmount(&_TssStakingSlashing.CallOpts, arg0)
}

// TssGroupContract is a free data retrieval call binding the contract method 0xd323041d.
//
// Solidity: function tssGroupContract() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCaller) TssGroupContract(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _TssStakingSlashing.contract.Call(opts, &out, "tssGroupContract")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TssGroupContract is a free data retrieval call binding the contract method 0xd323041d.
//
// Solidity: function tssGroupContract() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingSession) TssGroupContract() (common.Address, error) {
	return _TssStakingSlashing.Contract.TssGroupContract(&_TssStakingSlashing.CallOpts)
}

// TssGroupContract is a free data retrieval call binding the contract method 0xd323041d.
//
// Solidity: function tssGroupContract() view returns(address)
func (_TssStakingSlashing *TssStakingSlashingCallerSession) TssGroupContract() (common.Address, error) {
	return _TssStakingSlashing.Contract.TssGroupContract(&_TssStakingSlashing.CallOpts)
}

// ClearQuitRequestList is a paid mutator transaction binding the contract method 0x111b8c02.
//
// Solidity: function clearQuitRequestList() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) ClearQuitRequestList(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "clearQuitRequestList")
}

// ClearQuitRequestList is a paid mutator transaction binding the contract method 0x111b8c02.
//
// Solidity: function clearQuitRequestList() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) ClearQuitRequestList() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.ClearQuitRequestList(&_TssStakingSlashing.TransactOpts)
}

// ClearQuitRequestList is a paid mutator transaction binding the contract method 0x111b8c02.
//
// Solidity: function clearQuitRequestList() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) ClearQuitRequestList() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.ClearQuitRequestList(&_TssStakingSlashing.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _bitToken, address _tssGroupContract) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) Initialize(opts *bind.TransactOpts, _bitToken common.Address, _tssGroupContract common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "initialize", _bitToken, _tssGroupContract)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _bitToken, address _tssGroupContract) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) Initialize(_bitToken common.Address, _tssGroupContract common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Initialize(&_TssStakingSlashing.TransactOpts, _bitToken, _tssGroupContract)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _bitToken, address _tssGroupContract) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) Initialize(_bitToken common.Address, _tssGroupContract common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Initialize(&_TssStakingSlashing.TransactOpts, _bitToken, _tssGroupContract)
}

// IsJailed is a paid mutator transaction binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address user) returns(bool)
func (_TssStakingSlashing *TssStakingSlashingTransactor) IsJailed(opts *bind.TransactOpts, user common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "isJailed", user)
}

// IsJailed is a paid mutator transaction binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address user) returns(bool)
func (_TssStakingSlashing *TssStakingSlashingSession) IsJailed(user common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.IsJailed(&_TssStakingSlashing.TransactOpts, user)
}

// IsJailed is a paid mutator transaction binding the contract method 0x14bfb527.
//
// Solidity: function isJailed(address user) returns(bool)
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) IsJailed(user common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.IsJailed(&_TssStakingSlashing.TransactOpts, user)
}

// QuitRequest is a paid mutator transaction binding the contract method 0x740efec3.
//
// Solidity: function quitRequest() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) QuitRequest(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "quitRequest")
}

// QuitRequest is a paid mutator transaction binding the contract method 0x740efec3.
//
// Solidity: function quitRequest() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) QuitRequest() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.QuitRequest(&_TssStakingSlashing.TransactOpts)
}

// QuitRequest is a paid mutator transaction binding the contract method 0x740efec3.
//
// Solidity: function quitRequest() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) QuitRequest() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.QuitRequest(&_TssStakingSlashing.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) RenounceOwnership() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.RenounceOwnership(&_TssStakingSlashing.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.RenounceOwnership(&_TssStakingSlashing.TransactOpts)
}

// SetAddress is a paid mutator transaction binding the contract method 0x3b58524d.
//
// Solidity: function setAddress(address _token, address _tssGroup) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) SetAddress(opts *bind.TransactOpts, _token common.Address, _tssGroup common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "setAddress", _token, _tssGroup)
}

// SetAddress is a paid mutator transaction binding the contract method 0x3b58524d.
//
// Solidity: function setAddress(address _token, address _tssGroup) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) SetAddress(_token common.Address, _tssGroup common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetAddress(&_TssStakingSlashing.TransactOpts, _token, _tssGroup)
}

// SetAddress is a paid mutator transaction binding the contract method 0x3b58524d.
//
// Solidity: function setAddress(address _token, address _tssGroup) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) SetAddress(_token common.Address, _tssGroup common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetAddress(&_TssStakingSlashing.TransactOpts, _token, _tssGroup)
}

// SetSlashingParams is a paid mutator transaction binding the contract method 0xde6fb88a.
//
// Solidity: function setSlashingParams(uint256[2] _slashAmount, uint256[2] _exIncome) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) SetSlashingParams(opts *bind.TransactOpts, _slashAmount [2]*big.Int, _exIncome [2]*big.Int) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "setSlashingParams", _slashAmount, _exIncome)
}

// SetSlashingParams is a paid mutator transaction binding the contract method 0xde6fb88a.
//
// Solidity: function setSlashingParams(uint256[2] _slashAmount, uint256[2] _exIncome) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) SetSlashingParams(_slashAmount [2]*big.Int, _exIncome [2]*big.Int) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetSlashingParams(&_TssStakingSlashing.TransactOpts, _slashAmount, _exIncome)
}

// SetSlashingParams is a paid mutator transaction binding the contract method 0xde6fb88a.
//
// Solidity: function setSlashingParams(uint256[2] _slashAmount, uint256[2] _exIncome) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) SetSlashingParams(_slashAmount [2]*big.Int, _exIncome [2]*big.Int) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.SetSlashingParams(&_TssStakingSlashing.TransactOpts, _slashAmount, _exIncome)
}

// Slashing is a paid mutator transaction binding the contract method 0x5887c33c.
//
// Solidity: function slashing(bytes _messageBytes, bytes _sig) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) Slashing(opts *bind.TransactOpts, _messageBytes []byte, _sig []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "slashing", _messageBytes, _sig)
}

// Slashing is a paid mutator transaction binding the contract method 0x5887c33c.
//
// Solidity: function slashing(bytes _messageBytes, bytes _sig) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) Slashing(_messageBytes []byte, _sig []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Slashing(&_TssStakingSlashing.TransactOpts, _messageBytes, _sig)
}

// Slashing is a paid mutator transaction binding the contract method 0x5887c33c.
//
// Solidity: function slashing(bytes _messageBytes, bytes _sig) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) Slashing(_messageBytes []byte, _sig []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Slashing(&_TssStakingSlashing.TransactOpts, _messageBytes, _sig)
}

// Staking is a paid mutator transaction binding the contract method 0x5df6db49.
//
// Solidity: function staking(uint256 _amount, bytes _pubKey) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) Staking(opts *bind.TransactOpts, _amount *big.Int, _pubKey []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "staking", _amount, _pubKey)
}

// Staking is a paid mutator transaction binding the contract method 0x5df6db49.
//
// Solidity: function staking(uint256 _amount, bytes _pubKey) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) Staking(_amount *big.Int, _pubKey []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Staking(&_TssStakingSlashing.TransactOpts, _amount, _pubKey)
}

// Staking is a paid mutator transaction binding the contract method 0x5df6db49.
//
// Solidity: function staking(uint256 _amount, bytes _pubKey) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) Staking(_amount *big.Int, _pubKey []byte) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.Staking(&_TssStakingSlashing.TransactOpts, _amount, _pubKey)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TssStakingSlashing *TssStakingSlashingSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TransferOwnership(&_TssStakingSlashing.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.TransferOwnership(&_TssStakingSlashing.TransactOpts, newOwner)
}

// UnJail is a paid mutator transaction binding the contract method 0x6eae5b11.
//
// Solidity: function unJail() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) UnJail(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "unJail")
}

// UnJail is a paid mutator transaction binding the contract method 0x6eae5b11.
//
// Solidity: function unJail() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) UnJail() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.UnJail(&_TssStakingSlashing.TransactOpts)
}

// UnJail is a paid mutator transaction binding the contract method 0x6eae5b11.
//
// Solidity: function unJail() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) UnJail() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.UnJail(&_TssStakingSlashing.TransactOpts)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0xca628c78.
//
// Solidity: function withdrawToken() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactor) WithdrawToken(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _TssStakingSlashing.contract.Transact(opts, "withdrawToken")
}

// WithdrawToken is a paid mutator transaction binding the contract method 0xca628c78.
//
// Solidity: function withdrawToken() returns()
func (_TssStakingSlashing *TssStakingSlashingSession) WithdrawToken() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.WithdrawToken(&_TssStakingSlashing.TransactOpts)
}

// WithdrawToken is a paid mutator transaction binding the contract method 0xca628c78.
//
// Solidity: function withdrawToken() returns()
func (_TssStakingSlashing *TssStakingSlashingTransactorSession) WithdrawToken() (*types.Transaction, error) {
	return _TssStakingSlashing.Contract.WithdrawToken(&_TssStakingSlashing.TransactOpts)
}

// TssStakingSlashingAddDepositIterator is returned from FilterAddDeposit and is used to iterate over the raw logs and unpacked data for AddDeposit events raised by the TssStakingSlashing contract.
type TssStakingSlashingAddDepositIterator struct {
	Event *TssStakingSlashingAddDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingAddDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingAddDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingAddDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingAddDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingAddDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingAddDeposit represents a AddDeposit event raised by the TssStakingSlashing contract.
type TssStakingSlashingAddDeposit struct {
	Arg0 common.Address
	Arg1 IStakingSlashingDepositInfo
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterAddDeposit is a free log retrieval operation binding the contract event 0x3183ac23cb0f1e36109abc28e6807d6282c166cb0a538cb5617024770fc73835.
//
// Solidity: event AddDeposit(address arg0, (address,bytes,uint256) arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterAddDeposit(opts *bind.FilterOpts) (*TssStakingSlashingAddDepositIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "AddDeposit")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingAddDepositIterator{contract: _TssStakingSlashing.contract, event: "AddDeposit", logs: logs, sub: sub}, nil
}

// WatchAddDeposit is a free log subscription operation binding the contract event 0x3183ac23cb0f1e36109abc28e6807d6282c166cb0a538cb5617024770fc73835.
//
// Solidity: event AddDeposit(address arg0, (address,bytes,uint256) arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchAddDeposit(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingAddDeposit) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "AddDeposit")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingAddDeposit)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "AddDeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddDeposit is a log parse operation binding the contract event 0x3183ac23cb0f1e36109abc28e6807d6282c166cb0a538cb5617024770fc73835.
//
// Solidity: event AddDeposit(address arg0, (address,bytes,uint256) arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseAddDeposit(log types.Log) (*TssStakingSlashingAddDeposit, error) {
	event := new(TssStakingSlashingAddDeposit)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "AddDeposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TssStakingSlashingInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the TssStakingSlashing contract.
type TssStakingSlashingInitializedIterator struct {
	Event *TssStakingSlashingInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingInitialized represents a Initialized event raised by the TssStakingSlashing contract.
type TssStakingSlashingInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterInitialized(opts *bind.FilterOpts) (*TssStakingSlashingInitializedIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingInitializedIterator{contract: _TssStakingSlashing.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingInitialized) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingInitialized)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseInitialized(log types.Log) (*TssStakingSlashingInitialized, error) {
	event := new(TssStakingSlashingInitialized)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TssStakingSlashingOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the TssStakingSlashing contract.
type TssStakingSlashingOwnershipTransferredIterator struct {
	Event *TssStakingSlashingOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingOwnershipTransferred represents a OwnershipTransferred event raised by the TssStakingSlashing contract.
type TssStakingSlashingOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*TssStakingSlashingOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingOwnershipTransferredIterator{contract: _TssStakingSlashing.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingOwnershipTransferred)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseOwnershipTransferred(log types.Log) (*TssStakingSlashingOwnershipTransferred, error) {
	event := new(TssStakingSlashingOwnershipTransferred)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TssStakingSlashingSlashingIterator is returned from FilterSlashing and is used to iterate over the raw logs and unpacked data for Slashing events raised by the TssStakingSlashing contract.
type TssStakingSlashingSlashingIterator struct {
	Event *TssStakingSlashingSlashing // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingSlashingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingSlashing)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingSlashing)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingSlashingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingSlashingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingSlashing represents a Slashing event raised by the TssStakingSlashing contract.
type TssStakingSlashingSlashing struct {
	Arg0 common.Address
	Arg1 uint8
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterSlashing is a free log retrieval operation binding the contract event 0x9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e.
//
// Solidity: event Slashing(address arg0, uint8 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterSlashing(opts *bind.FilterOpts) (*TssStakingSlashingSlashingIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "Slashing")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingSlashingIterator{contract: _TssStakingSlashing.contract, event: "Slashing", logs: logs, sub: sub}, nil
}

// WatchSlashing is a free log subscription operation binding the contract event 0x9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e.
//
// Solidity: event Slashing(address arg0, uint8 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchSlashing(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingSlashing) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "Slashing")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingSlashing)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "Slashing", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSlashing is a log parse operation binding the contract event 0x9453459a6e9fa2069f1490c99cec15646afa157300f218a7f7840b23d09dbd3e.
//
// Solidity: event Slashing(address arg0, uint8 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseSlashing(log types.Log) (*TssStakingSlashingSlashing, error) {
	event := new(TssStakingSlashingSlashing)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "Slashing", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// TssStakingSlashingWithdrawIterator is returned from FilterWithdraw and is used to iterate over the raw logs and unpacked data for Withdraw events raised by the TssStakingSlashing contract.
type TssStakingSlashingWithdrawIterator struct {
	Event *TssStakingSlashingWithdraw // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *TssStakingSlashingWithdrawIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(TssStakingSlashingWithdraw)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(TssStakingSlashingWithdraw)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *TssStakingSlashingWithdrawIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *TssStakingSlashingWithdrawIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// TssStakingSlashingWithdraw represents a Withdraw event raised by the TssStakingSlashing contract.
type TssStakingSlashingWithdraw struct {
	Arg0 common.Address
	Arg1 *big.Int
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterWithdraw is a free log retrieval operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address arg0, uint256 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) FilterWithdraw(opts *bind.FilterOpts) (*TssStakingSlashingWithdrawIterator, error) {

	logs, sub, err := _TssStakingSlashing.contract.FilterLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return &TssStakingSlashingWithdrawIterator{contract: _TssStakingSlashing.contract, event: "Withdraw", logs: logs, sub: sub}, nil
}

// WatchWithdraw is a free log subscription operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address arg0, uint256 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) WatchWithdraw(opts *bind.WatchOpts, sink chan<- *TssStakingSlashingWithdraw) (event.Subscription, error) {

	logs, sub, err := _TssStakingSlashing.contract.WatchLogs(opts, "Withdraw")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(TssStakingSlashingWithdraw)
				if err := _TssStakingSlashing.contract.UnpackLog(event, "Withdraw", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseWithdraw is a log parse operation binding the contract event 0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364.
//
// Solidity: event Withdraw(address arg0, uint256 arg1)
func (_TssStakingSlashing *TssStakingSlashingFilterer) ParseWithdraw(log types.Log) (*TssStakingSlashingWithdraw, error) {
	event := new(TssStakingSlashingWithdraw)
	if err := _TssStakingSlashing.contract.UnpackLog(event, "Withdraw", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
